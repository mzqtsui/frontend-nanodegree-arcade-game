"use strict";

/* Resources.js
 * This is simply an image loading utility. It eases the process of loading
 * image files so that they can be used within your game. It also includes
 * a simple "caching" layer so it will reuse cached images if you attempt
 * to load the same image multiple times.
 */
(function () {
    var resourceCache = {};
    var loading = [];
    var readyCallbacks = [];

    /* This is the publicly accessible image loading function. It accepts
     * an array of strings pointing to image files or a string for a single
     * image. It will then call our private image loading function accordingly.
     */
    function load(urlOrArr) {
        if (urlOrArr instanceof Array) {
            /* If the developer passed in an array of images
             * loop through each value and call our image
             * loader on that image file
             */
            urlOrArr.forEach(function (url) {
                _load(url);
            });
        } else {
            /* The developer did not pass an array to this function,
             * assume the value is a string and call our image loader
             * directly.
             */
            _load(urlOrArr);
        }
    }

    /* This is our private image loader function, it is
     * called by the public image loader function.
     */
    function _load(url) {
        if (resourceCache[url]) {
            /* If this URL has been previously loaded it will exist within
             * our resourceCache array. Just return that image rather
             * re-loading the image.
             */
            return resourceCache[url];
        } else {
            /* This URL has not been previously loaded and is not present
             * within our cache; we'll need to load this image.
             */
            var img = new Image();
            img.onload = function () {
                /* Once our image has properly loaded, add it to our cache
                 * so that we can simply return this image if the developer
                 * attempts to load this file in the future.
                 */
                resourceCache[url] = img;

                /* Once the image is actually loaded and properly cached,
                 * call all of the onReady() callbacks we have defined.
                 */
                if (isReady()) {
                    readyCallbacks.forEach(function (func) {
                        func();
                    });
                }
            };

            /* Set the initial cache value to false, this will change when
             * the image's onload event handler is called. Finally, point
             * the image's src attribute to the passed in URL.
             */
            resourceCache[url] = false;
            img.src = url;
        }
    }

    /* This is used by developers to grab references to images they know
     * have been previously loaded. If an image is cached, this functions
     * the same as calling load() on that URL.
     */
    function get(url) {
        return resourceCache[url];
    }

    /* This function determines if all of the images that have been requested
     * for loading have in fact been properly loaded.
     */
    function isReady() {
        var ready = true;
        for (var k in resourceCache) {
            if (resourceCache.hasOwnProperty(k) && !resourceCache[k]) {
                ready = false;
            }
        }
        return ready;
    }

    /* This function will add a function to the callback stack that is called
     * when all requested images are properly loaded.
     */
    function onReady(func) {
        readyCallbacks.push(func);
    }

    /* This object defines the publicly accessible functions available to
     * developers by creating a global Resources object.
     */
    window.Resources = {
        load: load,
        get: get,
        onReady: onReady,
        isReady: isReady
    };
})();
'use strict';

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* CONSTANTS
*/

// Show hitboxes for debugging
var DRAW_HITBOXES = false;

var LIMITS = {
    x: 505,
    y: 605
};

var NUM_ROWS = 6,
    NUM_COLS = 5,
    TILE_HEIGHT = 83,
    TILE_WIDTH = 101,
    MAX_ENEMIES = 5,
    MAX_HEALTH = 3;

var PLAYER_SPAWN = {
    x: 202,
    y: 405
};

var IMG_SRC = {
    BLOCK_STONE: 'images/stone-block.png',
    BLOCK_WATER: 'images/water-block.png',
    BLOCK_GRASS: 'images/grass-block.png',
    GEM_GREEN: 'images/gem-green.png',
    GEM_BLUE: 'images/gem-blue.png',
    GEM_ORANGE: 'images/gem-orange.png',
    ENEMY_BUG: 'images/enemy-bug.png',
    CHAR_BOY: 'images/char-boy.png',
    CHAR_PRINCESS: 'images/char-princess-girl.png',
    CHAR_CAT_GIRL: 'images/char-cat-girl.png',
    CHAR_HORN_GIRL: 'images/char-horn-girl.png',
    CHAR_PINK_GIRL: 'images/char-pink-girl.png',
    SELECTOR: 'images/Selector.png',
    HEART: 'images/heart-filled.png'
};

var GEMS = [{ sprite: IMG_SRC.GEM_GREEN, value: 10 }, { sprite: IMG_SRC.GEM_BLUE, value: 50 }, { sprite: IMG_SRC.GEM_ORANGE, value: 100 }];

var KEYS = {
    UP: 0,
    RIGHT: 1,
    LEFT: 2,
    DOWN: 3,
    ENTER: 4
};

var PLAYER_SPRITES = [IMG_SRC.CHAR_BOY, IMG_SRC.CHAR_PRINCESS, IMG_SRC.CHAR_CAT_GIRL, IMG_SRC.CHAR_HORN_GIRL, IMG_SRC.CHAR_PINK_GIRL];

var GAME_STATES = {
    CHOOSING: 0,
    PLAYING: 1,
    GAME_OVER: 2
};

/**
* VARIABLES
*/
var allEnemies = [],
    player,
    enemySpawner,
    hud,
    gem,
    selector,
    currentState;

/**
* CLASSES
*/

/**
* @description General Renderable class for common methods on an item drawn on the canvas
* @constructor
* @param {number} x - x coordinate of object
* @param {number} y - y coordinate of object
* @param {string} sprite - url path of image sprite
* @param {number[]} hitbox - hitbox bounds [XOffset, YOffset, Width, Height]
*/

var Renderable = function () {
    function Renderable(x, y, sprite, hitbox) {
        _classCallCheck(this, Renderable);

        this.x = x;
        this.y = y;
        this.sprite = sprite;
        this.hitbox = hitbox;
        this.collisions = true;
    }

    // Draw the enemy on the screen, required method for game


    _createClass(Renderable, [{
        key: 'render',
        value: function render() {
            if (DRAW_HITBOXES && this.hitbox) ctx.strokeRect(this.hitbox[0] + this.x, this.hitbox[1] + this.y, this.hitbox[2], this.hitbox[3]);

            ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
        }

        // Does this object collide with the other object?

    }, {
        key: 'checkCollision',
        value: function checkCollision(obj) {
            if (!this.collisions || !obj.collisions) return;

            var leftA = this.hitbox[0] + this.x;
            var rightA = leftA + this.hitbox[2];
            var leftB = obj.hitbox[0] + obj.x;
            var rightB = leftB + obj.hitbox[2];
            var topA = this.hitbox[1] + this.y;
            var bottomA = topA + this.hitbox[3];
            var topB = obj.hitbox[1] + obj.y;
            var bottomB = topB + obj.hitbox[3];

            return leftA < rightB && rightA > leftB && topA < bottomB && bottomA > topB;
        }
    }]);

    return Renderable;
}();

/**
* @description Enemies our player must avoid
* @constructor
* @param {number} x - x coordinate of object
* @param {number} y - y coordinate of object
* @param {number} speed - movement speed
*/


var Enemy = function (_Renderable) {
    _inherits(Enemy, _Renderable);

    function Enemy(x, y, speed) {
        _classCallCheck(this, Enemy);

        var _this = _possibleConstructorReturn(this, (Enemy.__proto__ || Object.getPrototypeOf(Enemy)).call(this, x, y, IMG_SRC.ENEMY_BUG, [10, 80, 70, 60]));
        // Variables applied to each of our instances go here,
        // we've provided one for you to get started

        // The image/sprite for our enemies, this uses
        // a helper we've provided to easily load images


        _this.speed = speed;
        return _this;
    }

    _createClass(Enemy, [{
        key: 'update',


        // Update the enemy's position, required method for game
        // Parameter: dt, a time delta between ticks
        value: function update(dt) {
            // You should multiply any movement by the dt parameter
            // which will ensure the game runs at the same speed for
            // all computers.
            this.x += dt * this.speed;
            return this.x;
        }
    }, {
        key: 'reset',
        value: function reset() {
            this.x = -100;
        }
    }]);

    return Enemy;
}(Renderable);

/**
* @description Our playable hero
* @constructor
* @param {string} sprite - url path of image sprite
*/


var Player = function (_Renderable2) {
    _inherits(Player, _Renderable2);

    function Player(sprite) {
        _classCallCheck(this, Player);

        var _this2 = _possibleConstructorReturn(this, (Player.__proto__ || Object.getPrototypeOf(Player)).call(this, PLAYER_SPAWN.x, PLAYER_SPAWN.y, sprite, [27, 65, 50, 70]));

        _this2.speed = {
            x: TILE_WIDTH,
            y: TILE_HEIGHT
        };
        _this2.isHit = false;
        return _this2;
    }

    _createClass(Player, [{
        key: 'update',
        value: function update() {}
    }, {
        key: 'render',
        value: function render() {
            if (this.isHit) {
                ctx.save();
                ctx.translate(this.x + TILE_WIDTH + 20, this.y + 10);
                ctx.rotate(1);
                ctx.drawImage(Resources.get(this.sprite), 0, 0);
                ctx.restore();
            } else {
                _get(Player.prototype.__proto__ || Object.getPrototypeOf(Player.prototype), 'render', this).call(this);
            }
        }
    }, {
        key: 'handleInput',
        value: function handleInput(dir) {
            if (this.isHit) return;

            switch (dir) {
                case KEYS.LEFT:
                    this.x -= this.speed.x;
                    if (this.x < 0) this.x = 0;
                    break;

                case KEYS.UP:
                    this.y -= this.speed.y;
                    if (this.y < -10) this.y = -10;
                    break;

                case KEYS.RIGHT:
                    this.x += this.speed.x;
                    if (this.x > LIMITS.x - TILE_WIDTH) this.x = LIMITS.x - TILE_WIDTH;
                    break;

                case KEYS.DOWN:
                    this.y += this.speed.y;
                    if (this.y > LIMITS.y - 200) this.y = LIMITS.y - 200;
                    break;

                default:
                    console.error('Player handleInput received invalid input', dir);
                    break;
            }
        }
    }, {
        key: 'takeDamage',
        value: function takeDamage() {
            var _this3 = this;

            this.isHit = true;
            this.collisions = false;
            setTimeout(function () {
                _this3.respawn();
            }, 1000);
        }
    }, {
        key: 'respawn',
        value: function respawn() {
            this.x = PLAYER_SPAWN.x;
            this.y = PLAYER_SPAWN.y;
            this.isHit = false;
            this.collisions = true;
        }
    }]);

    return Player;
}(Renderable);

/**
* @description Gem is a collection item that gives points
* @constructor
* @param {number} x - x coordinate of object
* @param {number} y - y coordinate of object
* @param {GEMS} gem - one of the GEMS array items
*/


var Gem = function (_Renderable3) {
    _inherits(Gem, _Renderable3);

    function Gem(x, y, gem) {
        _classCallCheck(this, Gem);

        var _this4 = _possibleConstructorReturn(this, (Gem.__proto__ || Object.getPrototypeOf(Gem)).call(this, x, y, gem.sprite, [18, 52, 66, 75]));

        _this4.value = gem.value;
        _this4.collected = false;
        return _this4;
    }

    _createClass(Gem, [{
        key: 'update',
        value: function update() {
            if (this.collected) {
                this.y -= 5;
            }
            if (_get(Gem.prototype.__proto__ || Object.getPrototypeOf(Gem.prototype), 'checkCollision', this).call(this, player)) {
                hud.changeScore(this.value);
                this.collisions = false;
                this.collected = true;
                setTimeout(spawnGem, 100);
            }
        }
    }]);

    return Gem;
}(Renderable);

/**
* @description HUD to display in-game scores and health
* @constructor
*/


var HUD = function () {
    function HUD() {
        _classCallCheck(this, HUD);

        this.score = 0;
        this.health = MAX_HEALTH;
    }

    _createClass(HUD, [{
        key: 'changeScore',
        value: function changeScore(val) {
            this.score += val;
        }
    }, {
        key: 'changeHealth',
        value: function changeHealth(val) {
            this.health += val;
        }
    }, {
        key: 'update',
        value: function update() {
            if (this.health === 0) currentState = GAME_STATES.GAME_OVER;
        }
    }, {
        key: 'render',
        value: function render() {
            ctx.fillStyle = 'black';
            ctx.font = '20pt sans-serif';
            ctx.fillText(pad(this.score, 6), 2, 40);

            for (var i = 0; i < this.health; i++) {
                ctx.drawImage(Resources.get(IMG_SRC.HEART), 410 + 30 * i, 18);
            }

            if (currentState === GAME_STATES.GAME_OVER) {
                ctx.save();
                ctx.globalAlpha = 0.7;
                ctx.fillRect(30, 180, ctx.canvas.width - 60, 140);
                ctx.globalAlpha = 1;
                ctx.font = "50pt sans-serif";
                ctx.textAlign = "center";
                ctx.fillStyle = "white";
                ctx.fillText("GAME OVER", ctx.canvas.width / 2, 250);
                ctx.font = "14pt sans-serif";
                ctx.fillText("Press any key to try again", ctx.canvas.width / 2, 290);
                ctx.restore();
            }
        }
    }]);

    return HUD;
}();

/**
* @description Selector to choose character
* @constructor
*/


var Selector = function (_Renderable4) {
    _inherits(Selector, _Renderable4);

    function Selector() {
        _classCallCheck(this, Selector);

        var _this5 = _possibleConstructorReturn(this, (Selector.__proto__ || Object.getPrototypeOf(Selector)).call(this, 202, 120, IMG_SRC.SELECTOR, null));

        _this5.chosen = 2;
        return _this5;
    }

    _createClass(Selector, [{
        key: 'render',
        value: function render() {
            ctx.canvas.width = ctx.canvas.width;
            ctx.font = "28pt sans-serif";
            ctx.textAlign = "center";
            ctx.fillText("Choose your character", ctx.canvas.width / 2, 100);

            _get(Selector.prototype.__proto__ || Object.getPrototypeOf(Selector.prototype), 'render', this).call(this);

            // render character sprites on top of selector
            for (var i = 0; i < 5; i++) {
                ctx.drawImage(Resources.get(PLAYER_SPRITES[i]), i * TILE_WIDTH, 120);
            }
        }
    }, {
        key: 'handleInput',
        value: function handleInput(dir) {
            switch (dir) {
                case KEYS.LEFT:
                    this.chosen--;
                    this.x -= TILE_WIDTH;
                    if (this.chosen < 0) {
                        this.chosen = 0;
                        this.x = 0;
                    }
                    break;

                case KEYS.RIGHT:
                    this.chosen++;
                    this.x += TILE_WIDTH;
                    if (this.chosen >= PLAYER_SPRITES.length) {
                        this.chosen = PLAYER_SPRITES.length - 1;
                        this.x = LIMITS.x - TILE_WIDTH;
                    }
                    break;

                case KEYS.ENTER:
                    startGame(PLAYER_SPRITES[this.chosen]);
                    break;

                default:
                    console.error('Selector handleInput received invalid input', dir);
                    break;
            }
        }
    }]);

    return Selector;
}(Renderable);

function spawnGem() {
    gem = new Gem(Math.floor(Math.random() * NUM_COLS) * TILE_WIDTH, Math.floor(Math.random() * NUM_ROWS) * TILE_HEIGHT, GEMS[Math.floor(Math.random() * 3)]);
}

function spawnEnemy() {
    if (allEnemies.length >= MAX_ENEMIES) clearInterval(enemySpawner);

    allEnemies.push(new Enemy(-TILE_WIDTH, Math.ceil(Math.random() * 3) * TILE_HEIGHT - 20, Math.random() * 150 + 50));
}

function showCharacterSelect() {
    currentState = GAME_STATES.CHOOSING;
    selector = new Selector();
}

function startGame(playerSprite) {
    currentState = GAME_STATES.PLAYING;
    player = new Player(playerSprite);
    enemySpawner = setInterval(spawnEnemy, 1400);
    spawnGem();
    hud = new HUD();
}

/**
* UTILITIES
*/
function pad(num, size) {
    var s = "000000000" + num;
    return s.substr(s.length - size);
}

// This listens for key presses and sends the keys to your
// Player.handleInput() method. You don't need to modify this.
document.addEventListener('keyup', function (e) {
    var allowedKeys = {
        13: KEYS.ENTER,
        37: KEYS.LEFT,
        38: KEYS.UP,
        39: KEYS.RIGHT,
        40: KEYS.DOWN
    };
    if (currentState === GAME_STATES.CHOOSING) selector.handleInput(allowedKeys[e.keyCode]);else if (currentState === GAME_STATES.PLAYING) player.handleInput(allowedKeys[e.keyCode]);else if (currentState === GAME_STATES.GAME_OVER) showCharacterSelect();else console.error('Unknown game state', currentState);
});
'use strict';

/* Engine.js
 * This file provides the game loop functionality (update entities and render),
 * draws the initial game board on the screen, and then calls the update and
 * render methods on your player and enemy objects (defined in your app.js).
 *
 * A game engine works by drawing the entire game screen over and over, kind of
 * like a flipbook you may have created as a kid. When your player moves across
 * the screen, it may look like just that image/character is moving or being
 * drawn but that is not the case. What's really happening is the entire "scene"
 * is being drawn over and over, presenting the illusion of animation.
 *
 * This engine is available globally via the Engine variable and it also makes
 * the canvas' context (ctx) object globally available to make writing app.js
 * a little simpler to work with.
 */

var Engine = function (global) {
    /* Predefine the variables we'll be using within this scope,
     * create the canvas element, grab the 2D context for that canvas
     * set the canvas elements height/width and add it to the DOM.
     */

    var doc = global.document,
        win = global.window,
        canvas = doc.createElement('canvas'),
        ctx = canvas.getContext('2d'),
        lastTime;

    canvas.width = LIMITS.x;
    canvas.height = LIMITS.y;
    doc.body.appendChild(canvas);

    /* This function serves as the kickoff point for the game loop itself
     * and handles properly calling the update and render methods.
     */
    function main() {
        /* Get our time delta information which is required if your game
         * requires smooth animation. Because everyone's computer processes
         * instructions at different speeds we need a constant value that
         * would be the same for everyone (regardless of how fast their
         * computer is) - hurray time!
         */
        var now = Date.now(),
            dt = (now - lastTime) / 1000.0;

        /* Call our update/render functions, pass along the time delta to
         * our update function since it may be used for smooth animation.
         */

        if (currentState === GAME_STATES.PLAYING) {
            update(dt);
            render();
        } else if (currentState === GAME_STATES.CHOOSING) {
            selector.render();
        } else if (currentState === GAME_STATES.GAME_OVER) {}

        /* Set our lastTime variable which is used to determine the time delta
         * for the next time this function is called.
         */
        lastTime = now;

        /* Use the browser's requestAnimationFrame function to call this
         * function again as soon as the browser is able to draw another frame.
         */
        win.requestAnimationFrame(main);
    }

    /* This function does some initial setup that should only occur once,
     * particularly setting the lastTime variable that is required for the
     * game loop.
     */
    function init() {
        reset();
        lastTime = Date.now();
        showCharacterSelect();
        main();
    }

    /* This function is called by main (our game loop) and itself calls all
     * of the functions which may need to update entity's data. Based on how
     * you implement your collision detection (when two entities occupy the
     * same space, for instance when your character should die), you may find
     * the need to add an additional function call here. For now, we've left
     * it commented out - you may or may not want to implement this
     * functionality this way (you could just implement collision detection
     * on the entities themselves within your app.js file).
     */
    function update(dt) {
        canvas.width = canvas.width;
        updateEntities(dt);
        // checkCollisions();
    }

    /* This is called by the update function and loops through all of the
     * objects within your allEnemies array as defined in app.js and calls
     * their update() methods. It will then call the update function for your
     * player object. These update methods should focus purely on updating
     * the data/properties related to the object. Do your drawing in your
     * render methods.
     */
    function updateEntities(dt) {
        allEnemies.forEach(function (enemy) {
            if (enemy.update(dt) > LIMITS.x) enemy.reset();

            if (enemy.checkCollision(player)) {
                hud.changeHealth(-1);
                player.takeDamage();
            }
        });

        player.update();
        gem.update();
        hud.update();
    }

    /* This function initially draws the "game level", it will then call
     * the renderEntities function. Remember, this function is called every
     * game tick (or loop of the game engine) because that's how games work -
     * they are flipbooks creating the illusion of animation but in reality
     * they are just drawing the entire screen over and over.
     */
    function render() {
        /* This array holds the relative URL to the image used
         * for that particular row of the game level.
         */
        var rowImages = [IMG_SRC.BLOCK_WATER, // Top row is water
        IMG_SRC.BLOCK_STONE, // Row 1 of 3 of stone
        IMG_SRC.BLOCK_STONE, // Row 2 of 3 of stone
        IMG_SRC.BLOCK_STONE, // Row 3 of 3 of stone
        IMG_SRC.BLOCK_GRASS, // Row 1 of 2 of grass
        IMG_SRC.BLOCK_GRASS // Row 2 of 2 of grass
        ],
            row,
            col;

        /* Loop through the number of rows and columns we've defined above
         * and, using the rowImages array, draw the correct image for that
         * portion of the "grid"
         */
        for (row = 0; row < NUM_ROWS; row++) {
            for (col = 0; col < NUM_COLS; col++) {
                /* The drawImage function of the canvas' context element
                 * requires 3 parameters: the image to draw, the x coordinate
                 * to start drawing and the y coordinate to start drawing.
                 * We're using our Resources helpers to refer to our images
                 * so that we get the benefits of caching these images, since
                 * we're using them over and over.
                 */
                ctx.drawImage(Resources.get(rowImages[row]), col * TILE_WIDTH, row * TILE_HEIGHT);
            }
        }

        renderEntities();
    }

    /* This function is called by the render function and is called on each game
     * tick. Its purpose is to then call the render functions you have defined
     * on your enemy and player entities within app.js
     */
    function renderEntities() {
        /* Loop through all of the objects within the allEnemies array and call
         * the render function you have defined.
         */
        gem.render();
        allEnemies.forEach(function (enemy) {
            enemy.render();
        });

        player.render();
        hud.render();
    }

    /* This function does nothing but it could have been a good place to
     * handle game reset states - maybe a new game menu or a game over screen
     * those sorts of things. It's only called once by the init() method.
     */
    function reset() {}
    // noop


    /* Go ahead and load all of the images we know we're going to need to
     * draw our game level. Then set init as the callback method, so that when
     * all of these images are properly loaded our game will start.
     */
    Resources.load([IMG_SRC.BLOCK_STONE, IMG_SRC.BLOCK_WATER, IMG_SRC.BLOCK_GRASS, IMG_SRC.GEM_GREEN, IMG_SRC.GEM_BLUE, IMG_SRC.GEM_ORANGE, IMG_SRC.ENEMY_BUG, IMG_SRC.CHAR_BOY, IMG_SRC.CHAR_PRINCESS, IMG_SRC.CHAR_CAT_GIRL, IMG_SRC.CHAR_HORN_GIRL, IMG_SRC.CHAR_PINK_GIRL, IMG_SRC.SELECTOR, IMG_SRC.HEART]);
    Resources.onReady(init);

    /* Assign the canvas' context object to the global variable (the window
     * object when run in a browser) so that developers can use it more easily
     * from within their app.js files.
     */
    global.ctx = ctx;
}(window);
//# sourceMappingURL=app.js.map
